{
    "": {
        "prefix": "segment-tree",
        "body": [
          "// Segment tree",
          "  vector<int> v(n), seg(4 * n);",
          "  function<void(int, int, int)> build = [&](int ind, int low, int high) {",
          "    if (low == high) {",
          "      seg[ind] = v[low];",
          "      return;",
          "    }",
          "    int mid = (low + high) / 2;",
          "    build(2 * ind + 1, low, mid);",
          "    build(2 * ind + 2, mid + 1, high);",
          "    seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);",
          "  };",
          "  function<int(int, int, int, int, int)> query = [&](int ind, int low, int high,",
          "                                                     int l, int r) {",
          "    if (low >= l && high <= r) {",
          "      return seg[ind];",
          "    }",
          "    if (high < l || low > r)",
          "      return INF;",
          "    int mid = (low + high) / 2;",
          "    int left = query(2 * ind + 1, low, mid, l, r);",
          "    int right = query(2 * ind + 2, mid + 1, high, l, r);",
          "    return min(left, right);",
          "  };",
          "  // build(0, 0, n - 1);",
          "  // query(0, 0, n-1, l, r);"
        ],
        "description": ""
      }
}